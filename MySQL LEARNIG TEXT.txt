20210603

C:\WINDOWS\system32>mysql -u root -p
mysql> show databases;
mysql> create database my_test_1;
mysql> show databases;
mysql> use my_test_1;
Database changed
mysql> show tables;
Empty set (0.00 sec)

(명령은 대문자로 쓰는 상도덕)
mysql> CREATE TABLE Book (
    -> bookid INTEGER PRIMARY KEY,
    -> bookname VARCHAR(40),
    -> publisher VARCHAR(40),
    -> price INTEGER
    -> );
mysql> CREATE TABLE Customer (
    -> custid INTEGER PRIMARY KEY,
    -> name VARCHAR(40),
    -> address VARCHAR(50),
    -> phone VARCHAR(20)
    -> );

CREATE TABLE Orders (
orderid INTEGER PRIMARY KEY,
custid INTERGER ,
bookid INTERGER ,
saleprice INTERGER ,
orderdate DATE,
FOREIGN KEY (custid) REFERNCES Customer(custid),
FOREIGN KEY (bookid) REFERENCES Book(bookid)
);

CREATE TABLE Orders (
orderid INTEGER PRIMARY KEY,
custid INTEGER,
bookid INTEGER,
saleprice INTEGER,
orderdtae DATE,
FOREIGN KEY (custid) REFERENCES Customer(custid),
FOREIGN KEY (bookid) REFERENCES Book(bookid)
);


desc book;


INSERT INTO Book VALUES(1, '축구의 역사', '굿스포츠', 7000);
INSERT INTO Book VALUES(2, '축구아는 여자', '나무수', 13000);
INSERT INTO Book VALUES(3, '축구의 이해', '대한미디어', 22000);
INSERT INTO Book VALUES(4, '골프 바이블', '대한미디어', 35000);
INSERT INTO Book VALUES(5, '피겨 교본', '굿스포츠', 8000);
INSERT INTO Book VALUES(6, '역도 단계별기술', '굿스포츠', 6000);
INSERT INTO Book VALUES(7, '야구의 추억', '이상미디어', 20000);
INSERT INTO Book VALUES(8, '야구를 부탁해', '이상미디어', 13000);
INSERT INTO Book VALUES(9, '올림픽 이야기', '삼성당', 7500);
INSERT INTO Book VALUES(10, 'Olympic Champions', 'Pearson', 13000);

INSERT INTO Customer VALUES(1, '박지성', '영국 맨체스터', '000-5000-0001');
INSERT INTO Customer VALUES(2, '김연아', '대한민국 서울', '000-6000-0001');
INSERT INTO Customer VALUES(3, '장미란', '대한민국 강원도', '000-7000-0001');
INSERT INTO Customer VALUES(4, '추신수', '미국 클리블랜드', '000-8000-0001');
INSERT INTO Customer VALUES(5, '박세리', '대한민국 대전', NULL);

INSERT INTO Orders VALUES (1, 1, 1, 6000, STR_TO_DATE('2014-07-01', '%Y-%m-%d'));
INSERT INTO Orders VALUES (2, 1, 3, 21000, STR_TO_DATE('2014-07-03', '%Y-%m-%d'));
INSERT INTO Orders VALUES (3, 2, 5, 8000, STR_TO_DATE('2014-07-03', '%Y-%m-%d'));
INSERT INTO Orders VALUES (4, 3, 6, 6000, STR_TO_DATE('2014-07-04', '%Y-%m-%d'));
INSERT INTO Orders VALUES (5, 4, 7, 20000, STR_TO_DATE('2014-07-05', '%Y-%m-%d'));
INSERT INTO Orders VALUES (6, 1, 2, 12000, STR_TO_DATE('2014-07-07', '%Y-%m-%d'));
INSERT INTO Orders VALUES (7, 4, 8, 13000, STR_TO_DATE('2014-07-07', '%Y-%m-%d'));
INSERT INTO Orders VALUES (8, 3, 10, 12000, STR_TO_DATE('2014-07-08', '%Y-%m-%d'));
INSERT INTO Orders VALUES (9, 2, 10, 7000, STR_TO_DATE('2014-07-09', '%Y-%m-%d'));
INSERT INTO Orders VALUES (10, 3, 8, 13000, STR_TO_DATE('2014-07-10', '%Y-%m-%d'));

CREATE TABLE Imported_Book (
bookid INTEGER,
bookname VARCHAR(40),
publisher VARCHAR(40),
price INTEGER
);

INSERT INTO Imported_Book VALUES(21, 'Zen Golf', 'Pearson', 12000);
INSERT INTO Imported_Book VALUES(22, 'Soccer Skills', 'Human Kinetics', 15000);

commit;

select * imported_book;

select name, phone from customer where name='김연아';

select name, phone from customer where name='김연아' or name='추신수';

select DISTINCT publisher from book;
중복되는 것을 제거하고 unique 값만 보여줌

update book set price = 8000 where bookid = 1;

book 이라는 관계(표)에서 가격이 10000원 이하인 도서목록을 검색하라

select bookname from book where price <= 10000;

select bookname, price from book where price > 7000 and price <= 10000;

select bookname, price from book where price BETWEEN 7000 and  10000;

select bookname, price from book where bookname LIKE '%축구%';
축구를 포함한 책

SELECT * FROM book WHERE bookname LIKE '_구%';
'_구' 포함한 모든 

SELECT * FROM book WHERE publisher LIKE '%미디어%';

책 제목에 축구라는 문구가 있고, 대한미디어는 제외하는 레코드를 검색
SELECT * FROM Book WHERE bookname LIKE '%축구%' AND NOT publisher='대한미디어';

도서를 가격순으로 검색하고, 가격이 같으면 이름순으로 검색하시오
SELECT * FROM Book ORDER BY Price, bookname;

집계함수
고객이 주문한 도서의 총 판매액
SELECT SUM(saleprice) FROM Orders;

고객이 주문한 도서의 총 판매액을 '총매출'로 저장
SELECT SUM(saleprice) AS 총매출 FROM Orders;

select * from orders;

SELECT custid, COUNT(*) AS 총수량, SUM(saleprice) AS '총 판매액' FROM Orders GROUB BY custid;

고객별로 각각 주문한 도서의 총 수량과 총 판매액을 구하자
WHERE <> HAVING 
단수냐 복수냐

select count(bookid) from orders;

SELECT custid, COUNT(*) AS 도서수량 FROM Ordes WHERE saleprice >=8000
GROUP BY custid HAVING count(*) >=2;

SELECT custid, COUNT(*) AS 도서수량, SUM(saleprice) AS  총액 FROM orders GROUP BY custid;

2개의 테이블을 합치기
SELECT * FROM customer, Orders;
이렇게 합치면 50개가 나옴

고객과 고객의 주문에 관한 데이터를 모두 보이시오
SELECT * FROM Customer, Orders WHERE Customer.custid = Orders.custid;
Customer 와 Orders에서 custid가 같은거만 쓰자

p167 3-21
고객과 고객의 주문에 관한 데이터를 고객별로 정렬
SELECT * FROM Customer, Orders WHERE Customer.custid = Orders.custid ORDER BY Customer.custid;

p168 3-23
고객의 이름과 고객이 주문한 도서의 판매가격을 검색하시오
SELECT name, saleprice FROM Customer, Orders WHERE Customer.custid = Orders.custid ORDER BY Customer.custid;

SELECT FROM WHERE GROUP BY ORDER BY

3-24 고객별로 주문한  모든 도서의 총 판매액을 구하고 고객별로 정렬
SELECT name, SUM(Saleprice) FROM Customer, Orders WHERE Customer.custid=orders.custid GROUP BY Customer.name ORDER BY Customer.name;

3-25
SELECT FROM WHERE GROUP BY ORDER BY

SELECT Customer.name, Book.bookname FROM Customer, Orders, Book WHERE Customer.custid=Orders.custid AND Orders.bookid=Book.bookid;

외부조인 OUTER JOIN
SELECT Customer.name, saleprice FROM Customer RIGHT OUTER JOIN Orders ON Customer.custid=orders.custid;

SELECT MAX(price) FROM Book;

SELECT bookname FROM book WHERE price=35000;

SELECT bookname FROM book WHERE price=(SELECT MAX(price) FROM Book);

3-29
도서를 구매한 적이 있는
SELECT custid FROM Orders
고객의 이름
SELECT name FROM Customer Where Custid IN

SELECT name FROM Customer WHERE custid IN ( SELECT custid FROM Orders);

3-30 
대한미디어에서 출판한 도서를 구매한 고객의 이름

도서를 구매한
SELECT custid FROM Orders
도서
SELECT bookid FROM 

3-32
대한민국에서 거주하는 고객의 이름과 도서를 주문한 고객의 이름을 보이시오
(합집합)
대한민국에서 거주하는
SELECT name FROM Customer WHERE address LIKE '대한민국%';

^C

SELECT name FROM Customer WHERE Address LIKE '대한민국%' AND
Name NOT IN (SELECT name FROM Customer WHERE custid IN (SELECT custid FROM Orders));

199p
연습문제 2번
01 
select bookid from book;
SELECT COUNT(*) FROM book;
+----------+
| COUNT(*) |
+----------+
|       10 |
+----------+


02
SELECT DISTINCT publisher FROM book;
SELECT COUNT(publisher) FROM book;
+------------------+
| COUNT(publisher) |
+------------------+
|               10 |
+------------------+



03
SELECT * FROM customer;
SELECT name, address FROM customer;
+-----------+------------------------+
| name      | address                |
+-----------+------------------------+
| 박지성    | 영국 맨체스터          |
| 김연아    | 대한민국 서울          |
| 장미란    | 대한민국 강원도        |
| 추신수    | 미국 클리블랜드        |
| 박세리    | 대한민국 대전          |
+-----------+------------------------+

04
alter table [테이블명] change [컬럼명] [변경할컬럼명] varchar(12);
SELECT orderid FROM orders WHERE orderdate BETWEEN '2014-07-04' and '2014-07-07';
+---------+
| orderid |
+---------+
|       4 |
|       5 |
|       6 |
|       7 |
+---------+

05
SELECT orderid FROM orders WHERE orderdate NOT BETWEEN '2014-07-04' AND '2014-07-07';
+---------+
| orderid |
+---------+
|       1 |
|       2 |
|       3 |
|       8 |
|       9 |
|      10 |
+---------+


06
SELECT * FROM customer WHERE name LIKE '김%';
SELECT name, address FROM customer WHERE name LIKE '김%';
+-----------+---------------------+
| name      | address             |
+-----------+---------------------+
| 김연아    | 대한민국 서울       |
+-----------+---------------------+


07
SELECT * FROM customer WHERE name LIKE '김%아';
SELECT name, address FROM customer WHERE name LIKE '김%아';
+-----------+---------------------+
| name      | address             |
+-----------+---------------------+
| 김연아    | 대한민국 서울       |
+-----------+---------------------+

08
SELECT name FROM customer WHERE NOT EXISTS (SELECT custid FROM orders WHERE orders.custid=customer.custid);
+-----------+
| name      |
+-----------+
| 박세리    |
+-----------+

SELECT name FROM customer WHERE name NOT IN (SELECT name FROM customer, orders WHERE customer.custid=orders.custid);



09
SELECT SUM(saleprice) FROM orders;
SELECT SUM(saleprice) as 총액, AVG(saleprice) as 평균 FROM orders;
SELECT SUM(saleprice) as TOTAL, AVG(saleprice) as AVG FROM orders;
+--------+------------+
| TOTAL  | AVG        |
+--------+------------+
| 118000 | 11800.0000 |
+--------+------------+


10
SELECT name as 성함, sum(saleprice) as 으애액 FROM customer, orders WHERE customer.custid=orders.custid GROUP BY name;
+-----------+-----------+
| 성함      | 으애액    |
+-----------+-----------+
| 박지성    |     39000 |
| 김연아    |     15000 |
| 장미란    |     31000 |
| 추신수    |     33000 |
+-----------+-----------+


11
오답 : SELECT customer.name, bookid, bookname FROM orders WHEREorders.custid=orders.bookid;
정답 : select distinct customer.name, bookname from book, customer, orders where book.bookid = orders.bookid and customer.custid = orders.custid order by name;
SELECT customer.name, bookname FROM book, customer, orders WHERE book.bookid=orders.bookid and customer.custid=orders.custid ORDER BY name;
+-----------+------------------------+
| name      | bookname               |
+-----------+------------------------+
| 김연아    | 피겨 교본              |
| 김연아    | Olympic Champions      |
| 박지성    | 축구의 역사            |
| 박지성    | 축구의 이해            |
| 박지성    | 축구아는 여자          |
| 장미란    | 역도 단계별기술        |
| 장미란    | Olympic Champions      |
| 장미란    | 야구를 부탁해          |
| 추신수    | 야구의 추억            |
| 추신수    | 야구를 부탁해          |
+-----------+------------------------+



12
SELECT MAX(book.price = orders.saleprice) FROM book, orders WHERE book.bookid=orders.bookid;
SELECT MAX(book.price-orders.saleprice) FROM book, orders WHERE book.bookid=orders.bookid;
+----------------------------------+
| MAX(book.price-orders.saleprice) |
+----------------------------------+
|                             6000 |
+----------------------------------+


13
판매액평균
SELECT AVG(saleprice) FROM orders;
+----------------+
| AVG(saleprice) |
+----------------+
|     11800.0000 |
+----------------+

SELECT AVG(saleprice) FROM orders GROUB BY custid;

SELECT name, AVG(saleprice) FROM customer, orders WHERE customer.custid=orders.custid GROUP BY name;
+-----------+----------------+
| name      | AVG(saleprice) |
+-----------+----------------+
| 박지성    |     13000.0000 |
| 김연아    |      7500.0000 |
| 장미란    |     10333.3333 |
| 추신수    |     16500.0000 |
+-----------+----------------+


SELECT name, AVG(saleprice) FROM customer, orders WHERE customer.custid=orders.custid GROUP BY name HAVING AVG(saleprice) > (SELECT AVG(saleprice) FROM orders);
+-----------+----------------+
| name      | AVG(saleprice) |
+-----------+----------------+
| 박지성    |     13000.0000 |
| 추신수    |     16500.0000 |
+-----------+----------------+

도서의 가격(from book) - 판매가격(from orders)가 가장 큰 주문
SELECT * FROM book, orders WHERE book.bookid = orders.bookid AND price - saleprice = (select MAX(price - saleprice) FROM book, orders WHERE book.bookid = orders.bookid);


CREATE TABLE Book(
bookid INTEGER PRIMARY KEY,
bookname VARCHAR(40),
publisher VARCHAR(40),
price INTEGER
);

CREATE TABLE NewBook(
bookid INTERGER,
bookname VARCAHR(20),
publisher VARVHAR(20),
price INTERGER,
PRIMARY KEY (bookid)
);



CREATE TABLE NewBook(
bookid INTERGER,
bookname VARCAHR(20),
publisher VARVHAR(20),
price INTERGER,
PRIMARY KEY (bookname, publisher)
);

cascade 속해있다
CREATE TABLE NewOrders(
orderid INTEGER,
custid INTERGER 

CREATE TABLE NewBook(
bookid INTEGER,
bookname VARCHAR(20),
publisher VARCHAR(20),
price INTEGER
);

+-----------+-------------+------+-----+---------+-------+
| Field     | Type        | Null | Key | Default | Extra |
+-----------+-------------+------+-----+---------+-------+
| bookid    | int         | YES  |     | NULL    |       |
| bookname  | varchar(20) | YES  |     | NULL    |       |
| publisher | varchar(20) | YES  |     | NULL    |       |
| price     | int         | YES  |     | NULL    |       |
| isbn      | int         | YES  |     | NULL    |       |
+-----------+-------------+------+-----+---------+-------+


p187 3-37
ALTER TABLE NewBook ADD isbn VARCHAR(13);
ALTER TABLE NewBook MODIFY isbn INTEGER;


186p 회색박스 수정
ALTER COLUMN 속성이름 데이터타입
> MODIFY 속성이름 데이터타입

ALTER COLUMN 속성이름 NULL
> MODIFY 속성이름 데이터타입 NULL

+-----------+-------------+------+-----+---------+-------+
| Field     | Type        | Null | Key | Default | Extra |
+-----------+-------------+------+-----+---------+-------+
| bookid    | int         | YES  |     | NULL    |       |
| bookname  | varchar(20) | YES  |     | NULL    |       |
| publisher | varchar(20) | YES  |     | NULL    |       |
| price     | int         | YES  |     | NULL    |       |
+-----------+-------------+------+-----+---------+-------+

ALTER TABLE NewBook add primary key(bookid);


 drop table newbook;

mysql> SELECT * FROM customer WHERE custid=5;
+--------+-----------+---------------------+-------+
| custid | name      | address             | phone |
+--------+-----------+---------------------+-------+
|      5 | 박세리    | 대한민국 대전       | NULL  |
+--------+-----------+---------------------+-------+

UPDATE customer SET address='대한민국 부산' WHERE custid=5;

 SELECT * FROM customer WHERE custid=5;
+--------+-----------+---------------------+-------+
| custid | name      | address             | phone |
+--------+-----------+---------------------+-------+
|      5 | 박세리    | 대한민국 부산       | NULL  |
+--------+-----------+---------------------+-------+


DROP <> DELETE
DROP - TABLE을 삭제
DELETE - TABLE내에 contents를 삭제


뷰 - 가상의 테이블
CREATE VIEW vw_book AS SELECT * FROM book WHERE bookname LIKE '%축구%';

 SELECT * FROM vw_book;
+--------+---------------------+-----------------+-------+
| bookid | bookname            | publisher       | price |
+--------+---------------------+-----------------+-------+
|      1 | 축구의 역사         | 굿스포츠        |  7000 |
|      2 | 축구아는 여자       | 나무수          | 13000 |
|      3 | 축구의 이해         | 대한미디어      | 22000 |
+--------+---------------------+-----------------+-------+

show tables;
+----------------------+
| Tables_in_booktest01 |
+----------------------+
| book                 |
| customer             |
| imported_book        |
| orders               |
| vw_book              |
+----------------------+

DROP VIEW vw_book;

show tables;
+----------------------+
| Tables_in_booktest01 |
+----------------------+
| book                 |
| customer             |
| imported_book        |
| orders               |
+----------------------+


20210608
돌고래 514p
백업 및 복원 실습
덤프

관리자권한 cmd

c mysql bin
mysqldump.exe


show databases;

mysqldump -uroot -p1234 my_test_1 > c:\dumptest_20210608.db

복원

mysql -uroot -p my_test_1_copy < c:\dumptest_20210608.db


mysql-my.ini 수정

secure-file-priv='"c:/mysql"
서비스 새로 시작

확인
SELECT @@GLOBAL.secure_file_priv;
+----------------------------------+
| @@GLOBAL.secure_file_priv        |
+----------------------------------+
| C:\WINDOWS\system32\'"c:\mysql"\ |
+----------------------------------+

일단 표를 하나 만들어야함

use my_test_1

 create table csv_test(
    -> F_name VARCHAR(2),
    -> name VARCHAR(4),
    -> grade INTEGER);
Query OK, 0 rows affected (0.05 sec)

 show tables;
+---------------------+
| Tables_in_my_test_1 |
+---------------------+
| csv_test            |
+---------------------+

desc csv_test;
+--------+------------+------+-----+---------+-------+
| Field  | Type       | Null | Key | Default | Extra |
+--------+------------+------+-----+---------+-------+
| F_name | varchar(2) | YES  |     | NULL    |       |
| name   | varchar(4) | YES  |     | NULL    |       |
| grade  | int        | YES  |     | NULL    |       |
+--------+------------+------+-----+---------+-------+

load data infile 'c:/mysql/data/Womens Clothing E-Commerce Reviews.csv'
into table csv_test
fields terminated by ','
enclosed by '"'
lines terminated by '\n'
ignore 1 rows

데이터 경로
어디에 데이터를 넣을 것인지
어떻게 나눌것인지
어떻게 감싸져있는지
각 줄은 어떻게 정리
첫 번째 줄은 무시해라

mysqlsampledatabase.sql
파일 

source c:/mysql/data/mysqlsampledatabase.sql

show tables;
+-------------------------+
| Tables_in_classicmodels |
+-------------------------+
| customers               |
| employees               |
| offices                 |
| orderdetails            |
| orders                  |
| payments                |
| productlines            |
| products                |
+-------------------------+
8 rows in set (0.01 sec)

88p
SELECT A.ORDERDATE,
SUM(PRICEEACH*QUANTITYORDERED) AS Sales
FROM CLASSICMODELS.ORDERS A
LEFT
JOIN CLASSICMODELS.ORDERDETAILS B
ON A.ORDERNUMBER = B.ORDERNUMBER
GROUP BY 1
ORDER BY 1;

SELECT SUBSTR('abcde',2,3);
+---------------------+
| SUBSTR('abcde',2,3) |
+---------------------+
| bcd                 |
+---------------------+

 SELECT SUBSTR(A.ORDERDATE, 1,7) MM,
    -> SUM(PRICEEACH*QUANTITYORDERED) AS SALES
    -> FROM CLASSICMODELS.ORDERS A
    -> LEFT
    -> JOIN CLASSICMODELS.ORDERDETAILS B
    -> ON A.ORDERNUMBER = B.ORDERNUMBER
    -> GROUP
    -> BY
    -> 1
    -> ORDER
    -> by
    -> 1;

SELECT orderdate, customernumber, ordernumber FROM orders;

SELECT COUNT(ordernumber) N_ORDERS,
count(DISTINCT ORDERNUMBER) N_ORDERS_DISTINCT
FROM CLASSICMODELS.ORDERS;
 
94p
SELECT SUBSTR(A.orderdate, 1,4) YY,
COUNT(DISTINCT A.customernumber) N_PURCHASER,
SUM(priceeach*quantityordered) AS sales
FROM orders A
LEFT JOIN orderdetails B
ON a.ordernumber = b.ordernumber
GROUP BY 1
ORDER BY 1

SELECT SUBSTR(A.orderdate, 1,4) YY,
COUNT(DISTINCT A.customernumber) N_PURCHASER,
SUM(priceeach*quantityordered) AS sales,
SUM(priceeach*quantityordered) AS sales / COUNT(DISTINCT A.customernumber) AMV
FROM orders A
LEFT JOIN orderdetails B
ON a.ordernumber = b.ordernumber
GROUP BY 1
ORDER BY 1

SELECT SUBSTR(a.orderdate, 1,4) YY,
COUNT(DIstinct a.ordernumber) n.purchaser,
sum(priceeach*quantityordered) as sales,
sum(priceeach*quantityordeerd) as sales / count(distinct a.customernumber) amv
FROM orders A
LEFT JOIN orderdetails B
ON a.ordernumber = b.ordernumber
GROUP BY 1
ORDER BY 1

5장 
CREATE database CH5_Clothing;


CREATE TABLE WomensClothing(
SN INTEGER,
Clothing_ID INTEGER,
Age INTEGER,
Title VARCHAR(55),
Review_Text VARCHAR(510),
Rating INTEGER,
Recommended_IND INTEGER,
Positive_Feedback_Count INTEGER,
Division_Name VARCHAR(20),
Department_Name VARCHAR(20),
Class_Name VARCHAR(20)
)

load data infile 'c:/mysql/data/Womens Clothing E-Commerce Reviews.csv'
into table WomensClothing
fields terminated by ','
enclosed by '"'
lines terminated by '\n'
ignore 1 rows

SELECT division_name, AVG(Rating) AVG_RATE
    -> FROM WOMENSCLOTHING
    -> GROUP BY 1
    -> ORDER BY 2
    -> desc;

descending 내림차순

+----------------+----------+
| division_name  | AVG_RATE |
+----------------+----------+
|                |   5.0000 |
| Initmates      |   4.2863 |
| General Petite |   4.2111 |
| General        |   4.1766 |
+----------------+----------+

SELECT department_name,
    -> AVG(RATING) AVG_RATE
    -> FROM WOMENSCLOTHING
    -> GROUP BY 1
    -> ORDER BY 2
    -> desc;
+-----------------+----------+
| department_name | AVG_RATE |
+-----------------+----------+
|                 |   5.0000 |
| Bottoms         |   4.2888 |
| Intimate        |   4.2801 |
| Jackets         |   4.2645 |
| Tops            |   4.1722 |
| Dresses         |   4.1508 |
| Trend           |   3.8151 |
+-----------------+----------+

128p department가 trend 인 평점 3점 이하 리뷰
SELECT * FROM WOMENSCLOTHING WHERE DEPARTMENT_NAME = 'Trend' AND RAting <= 3;

SELECT SUBSTR(Review_TEXT, 1, 10)  FROM WOMENSCLOTHING WHERE DEPARTMENT_NAME = 'Trend' AND RAting <= 3;
서브스트링으로 10글자 혹은 n글자까지 보기

SELECT count(*)  FROM WOMENSCLOTHING WHERE DEPARTMENT_NAME = 'Trend' AND RAting <= 3;

SELECT count(*)  FROM WOMENSCLOTHING WHERE Rating <= 3 and DEPARTMENT_NAME = 'Trend' AND Review_Text like"%size%";
평점 3점이하에 size라는 단어를 포함한 리뷰

20210609
8장 타이타닉호 데이터분석
kaggle titanic data download

mysql/data/titanic_full.csv
저장

create database ch8_titanic;

csv 파일 내
wiki 관련
class 행 삭제

DATABASE : ch8_titanic;
DATATABLE : titanic_full_table

CREATE TABLE titanic_full_table (
PassengerID INTEGER,
Survived VARCHAR(2),
Pclass INTEGER,
Name VARCHAR(85),
SEX VARCHAR(10),
Age VARCHAR(10),
SibSp INTEGER,
Parch INTEGER,
Ticket VARCHAR(20),
Fare VARCHAR(20),
Cabin VARCHAR(20),
Embarked VARCHAR(20),
Hometown VARCHAR(50),
Boarded VARCHAR(15),
Destination VARCHAR(40),
Lifeboat VARCHAR(5),
Body VARCHAR(15)
)
;


load data infile 'c:/mysql/data/titanic_full.csv'
into table titanic_full_table
fields terminated by ','
enclosed by '"'
lines terminated by '\n'
ignore 1 rows













